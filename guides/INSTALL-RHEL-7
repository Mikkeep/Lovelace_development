Deploying Lovelace in RHEL 7
============================

This is a minimal guide to setting up Lovelace on RHEL 7


Enable a bunch of repos
-----------------------

See: https://fedoraproject.org/wiki/EPEL

Lovelace needs a bunch of packages from EPEL. If it's not yet enabled, you need to enable it. In order to use it, you also need to have "extras" (rhel-7-server-extras-rpms) and "optional" (rhel-7-server-optional-rpms) repositories enabled. 

Run the following commands to enable EPEL:

wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum install epel-release-latest-7.noarch.rpm

Also, EPEL Python 3 packages are somewhat broken, so IUS is also needed
See: https://ius.io/

Run the following commands to enable IUS
wget https://rhel7.iuscommunity.org/ius-release.rpm
sudo yum install ius-release.rpm

If you want a newer version of postgresql, you can also use the postgres yum repo

wget http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-redhat95-9.5-2.noarch.rpm
sudo yum install pgdg-redhat95-9.5-2.noarch.rpm

We are assuming this option 

Install and setup Postgresql
------------------

sudo yum install postgresql95-server postgresql95-contrib
sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb

(Note: replace 10.0.0.1 with your LAN accessible IP)

Edit /var/lib/pgsql/9.5/data/postgresql.conf:
listen_addresses = 'localhost,10.0.0.1'

Edit /var/lib/pgsql/9.5/data/pg_hba.conf:
host    lovelace    lovelace    10.0.0.1/24 md5

sudo systemctl start postgresql-9.5
sudo systemctl enable postgresql-9.5


Create database and user
------------------------

sudo -u postgres createuser -P lovelace
sudo -u postgres createdb --owner=lovelace lovelace


Testing
-------

psql --host=10.0.0.1 --dbname=lovelace --username=lovelace --password   



Setting up users and groups
---------------------------

We're going to create users for lovelace and the checker

useradd --system lovelace


Python 3.5.
-----------

sudo yum install python35u
ln -s /usr/bin/python3.5 /usr/bin/python3
python3 -m ensurepip
pip3 install virtualenv



Cloning the Lovelace repository
-------------------------------

sudo yum install git

sudo mkdir /var/lovelace
sudo chown lovelace:lovelace /var/lovelace
sudo cd /var/lovelace
sudo -u lovelace git clone https://github.com/miikkas/lovelace.git


Making a virtual environment
----------------------------

virtualenv /var/lovelace/venv

If postgresql was installed from postgres yum repository, its bin folder is not in the path and needs to be added
We're going to add it to our virtual environment 

nano /var/lovelace/venv/bin/activate

Add "/usr/pgsql-9.5" to the path in this file

After that we can activate the virtual environment

source /var/lovelace/venv/bin/activate



Install stuff
-------------

yum install postgresql95-devel
yum install libjpeg-turbo-devel
yum install redis32u
yum install rabbitmq-server
yum install python35u-devel

Make sure the virtual env is active before these installs

pip install python-magic
pip install psycopg2
pip install pygments
pip install pillow
pip install django==1.9
pip install django-redis
pip install celery[redis]
pip install django-allauth
pip install django-modeltranslation
pip install django-model-path-converter
pip install django-reversion
pip install django-nested-inline


Configure Lovelace
------------------

Edit /var/lovelace/lovelace/webapp/lovelace/settings.py 

Change the database engine to postgresql by following this guide:
https://docs.djangoproject.com/en/dev/ref/settings/#databases

Also set the user to lovelace, name to lovelace and password to the
password you entered for postgresql. Remember to set host and port.

Change STATIC_ROOT and MEDIA_ROOT to folders that are under /var/www, e.g.

STATIC_ROOT = "/var/www/lovelace/static"
MEDIA_ROOT = "/var/www/lovelace/upload"

Doing this will avoid a lot of dancing around with security policies and access contol
if using SELinux. 

NOTE: If you did this then you have to do collectstatic (see below) whenever updating the system in
order to make sure you all static files are also updated.

Also recommended, to turn on email verification:

ACCOUNT_EMAIL_VERIFICATION = "mandatory"


Initialize the database
-----------------------

python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser


Initialize the static & uploaded files
--------------------------------------


python manage.py collectstatic

mkdir -p /path/to/your/lovelace/webapp/upload/images
sudo chown -R www-data /path/to/your/lovelace/webapp/upload/




Installing/compiling mod_wsgi
-----------------------------

yum install python35u-mod_wsgi

Restart apache. After doing this check /var/log/httpd/error_log to see if there's a warning for differing python versions
e.g.

[wsgi:warn] [pid xxxxx] mod_wsgi: Compiled for Python/3.5.1.
[wsgi:warn] [pid xxxxx] mod_wsgi: Runtime using Python/3.5.2.

If this is the case you need to compile mod_wsgi manually, so remove it

yum erase python35u-mod_wsgi

Download the latest mod_wsgi source code 
https://github.com/GrahamDumpleton/mod_wsgi/releases

Extract and cd into the folder:
./configure --with-python=/usr/bin/python3.5
make
make install

Create a new file /etc/httpd/conf.modules.d/10-mod_wsgi.conf
with the following contents

LoadModule wsgi_module modules/mod_wsgi.so

Restart apache, check the error log and there should be no warning


Configuring apache
------------------

Create a configuration file for your site in /etc/httpd/conf.d, e.g. lovelace.conf

See example configuration at the end of this file. 


Access control and SELinux
--------------------------

wsgi.py needs to be executable

chmod a+x /var/lovelace/lovelace/webapp/lovelace/wsgi.py


If using SELinux (targeted mode), Lovelace needs a bunch of permissions to work. 

chcon -R -t httpd_user_content_t /var/lovelace/lovelace
chcon -R -t httpd_sys_script_exec_t /var/lovelace/venv/lib64/python3.5/site-packages

setsebool -P httpd_can_network_connect 1
setsebool -P httpd_can_network_connect_db 1
setsebool -P httpd_can_sendmail 1



Configuring celery
------------------

Redis should be running after it's been installed, but rabbitmq is not. Start it:

sudo systemctl start rabbitmq-server
sudo systemctl enable rabbitmq-server

Create a user for the checking server

sudo useradd --system lovelace_celery

Start a screen as lovelace_celery and run

/var/lovelace/lovelace/webapp/runcelery.sh


Optional: SSL
-------------

Make a certificate signing request and get a certificate from your CA. 
(see https://www.sslshopper.com/how-to-order-an-ssl-certificate.html)

Put the certificate file(s) and your generated key into
/etc/pki/tls/certs

If SELinux is in use, do the following to make sure they have the proper context:

chcon --reference /etc/pki/tls/certs/localhost.crt /etc/pki/tls/certs/your_certificate.crt 

Edit /etc/httpd/conf.d/ssl.conf 
Change the following directives to point at your files
SSLCertificateFile
SSLCertificateKeyFile

Cut and paste your sites configuration under the VirtualHost directive in ssl.conf

Replace your HTTP configuration with

<VirtualHost *:80>
  
  ServerName your.server.somewhere
  Redirect permanent / https://your.server.somewhere

</VirtualHost>


Optional: Shibboleth
--------------------

1) Install shibboleth and mod_shib
(I do not remember how, good luck)

Install django-shibboleth-remoteuser:
pip install git+https://github.com/Brown-University-Library/django-shibboleth-remoteuser.git

2) generate certificates if needed

3) Configure shibboleth (/etc/shibboleth/shibboleth2.xml)
fill in ApplicationDefaults entityID (e.g. http://your.server.org/shibboleth)
fill in SSO entityID (from your IdP)

fill in MetaDataProvider as instructed by your IdP
check that CredentialResolver points to your certificates

generate metadata

./metagen.sh -c your_cert -h server_url -o organization_name -u organization_url -a admin_info > sp-metadata.xml

where admin_info is "first_name/last_name/email"

4) send the metadata to your IdP and request the attributes you want 

5) edit attribute-map.xml to extract the attributes you want

6) wait for your IdP to add your metadata

7) activate shibboleth

systemctl start shibd
apachectl restart

try 
https://your.server.org/Shibboleth.SSO/Login
https://your.server.org/Shibboleth.SSO/Session

the latter should show all of your attributes

8) setup apache to give you shibboleth headers

add 
<Location />
    AuthType shibboleth
    Require shibboleth
</Location>

to your apache configuration - this makes shibboleth attributes available

9) setup lovelace to support shibboleth

Edit /var/lovelace/lovelace/webapp/lovelace/settings.py 

add 'shibboleth.backends.ShibbolethRemoteUserBackend' to AUTHENTICATION_BACKENDS

AND

add 'shibboleth.middleware.ShibbolethRemoteUserMiddleware' to MIDDLEWARE_CLASSES after 'django.contrib.auth.middleware.AuthenticationMiddleware'

OR

add 'courses.middleware.LovelaceShibbolethRemoteUser' instead if you want to 
get student_id from Shibboleth (supports schacPersonalUniqueCode)

set 
LOGIN_URL = 'https://your.server.org/Shibboleth.sso/Login'
SHIBBOLETH_LOGOUT_URL = 'https://your.server.org/Shibboleth.sso/Logout?return=%s'
SHIBBOLETH_LOGOUT_REDIRECT_URL = 'https://your.server.org'

make
SHIBBOLETH_ATTRIBUTE_MAP = {
    "shib-user": (True, "username"),
    "shib-given-name": (True, "first_name"),
    "shib-sn": (True, "last_name"),
    "shib-mail": (False, "email"),
}

replacing "shib-user" etc. with the attribute names from /Shibboleth.sso/Session

add 'shibboleth' to INSTALLED_APPS

add these two lines to settings.py
ACCOUNT_USERNAME_VALIDATORS = "courses.adapter.username_validators"
ACCOUNT_ADAPTER = "courses.adapter.LovelaceAccountAdapter"




Appendix 1. Example apache configuration
========================================

WSGIPythonPath /var/lovelace/venv/lib64/python3.5/site-packages:/var/lovelace/lovelace/webapp

<VirtualHost *:80>

  ServerName your.server.somewhere
  ServerAdmin admin@somewhere
  UseCanonicalName On

  Alias /media/ /var/www/lovelace/upload/
  Alias /static/ /var/www/lovelace/static/

  <Directory /var/www/lovelace/static>
      Order deny,allow
      Allow from all
  </Directory>

  <Directory /var/www/lovelace//upload>
      Order deny,allow
      Allow from all
  </Directory>

  WSGIScriptAlias / /var/lovelace/lovelace/webapp/lovelace/wsgi.py

  <Directory /var/lovelace/lovelace/webapp/lovelace>
    <Files wsgi.py>
      Order allow,deny
      Allow from all
      Require all granted
    </Files>
  </Directory>

</VirtualHost>

